#!/bin/bash

maxScore=10
minScore=-20

refreshTime="0.001"

scoreFile=$HOME/.prepohra.scr

maxNbScores=10

prepositions="""mezi (čin)	4	akuzitav	koho co
mimo	4	akuzitav	koho co
na (čin)	4	akuzitav	koho co
nad (čin)	4	akuzitav	koho co
pod (čin)	4	akuzitav	koho co
přes	4	akuzitav	koho co
za (čin)	4	akuzitav	koho co
na (čas)	4	akuzitav	koho co
ve (čas)	4	akuzitav	koho co
za (čas:budoucnost)	4	akuzitav	koho co
pro	4	akuzitav	koho co
do (čin)	3	genitiv	koho čeho
od (čin)	3	genitiv	koho čeho
ze	3	genitiv	koho čeho
kolem (stav)	3	genitiv	koho čeho
okolo	3	genitiv	koho čeho
podél	3	genitiv	koho čeho
u	3	genitiv	koho čeho
uprostřed	3	genitiv	koho čeho
uvnitř	3	genitiv	koho čeho
během	3	genitiv	koho čeho
do (čas)	3	genitiv	koho čeho
kolem (čas)	3	genitiv	koho čeho
od (čas)	3	genitiv	koho čeho
za (čas:během)	3	genitiv	koho čeho
bez	3	genitiv	koho čeho
kromě	3	genitiv	koho čeho
místo	3	genitiv	koho čeho
podle	3	genitiv	koho čeho
ke	2	datif	komu čemu
naproti	2	datif	komu čemu
díky	2	datif	komu čemu
kvůli	2	datif	komu čemu
proti	2	datif	komu čemu
na (stav)	6	lokál	kom čem
po (stav)	6	lokál	kom čem
ve (stav)	6	lokál	kom čem
o (čas)	6	lokál	kom čem
po (čas)	6	lokál	kom čem
při	6	lokál	kom čem
o (mluv)	6	lokál	kom čem
mezi (stav)	7	instrumentál	kým čím
nad (stav)	7	instrumentál	kým čím
pod (stav)	7	instrumentál	kým čím
před (stav)	7	instrumentál	kým čím
za (stav)	7	instrumentál	kým čím
před (čas)	7	instrumentál	kým čím
se	7	instrumentál	kým čím"""

up="`echo -e '\e[A'`"
down="`echo -e '\e[B'`"
return="`echo -e '\n'`"

#############################################################################

# Clear the display

echo -ne "\0033\0143"; setterm -cursor off

#-

# Change terminal behavior

trap "stty sane;stty sane; setterm -cursor on;exit 1" SIGTERM SIGINT # Clear changes if [Ctrl]+[C]

stty -echo -icanon time 0 min 0 # Don't wait when read user input

#-

i=1
position=1

while [ 1 ]; do # Until the end...
	
	# Wait a bit
	
	sleep $refreshTime
	
	#-
	
	# Clear the display if window resized
	
	newNbColumns=$(tput cols)
	
	if [ "$newNbColumns" != "$nbColumns" ]; then
		
		echo -ne "\0033\0143"; setterm -cursor off
		
	fi
	
	nbColumns="$newNbColumns"
	
	#-
	
	# Display heading
	
	tput cup 1 $(((nbColumns-10)/2))
	echo -e "\e[93mWelcome to\e[0m"
	
	#-
	
	# Display title
	
	tput cup 4 $(((nbColumns-12)/2))
	echo -e "\e[32m\e[1mPrepo-Hra :D\e[0m"
	
	if [ "$i" -le "100" ]; then
		
		text="\e[32m#-#-#-#-#-#-\e[0m"
		
	
	else
		
		text="\e[32m-#-#-#-#-#-#\e[0m"
		
	fi
	
	tput cup 3 $(((nbColumns - 12)/2))
	echo -e "$text"
	tput cup 5 $(((nbColumns - 12)/2))
	echo -e "$text"
	
	((i+=1))
	
	if [ "$i" -gt "200" ]; then
		
		i=1
		
	fi
	
	#-
	
	# Display menu
	
	tput cup 7 $(((nbColumns - 6)/2))
	echo -e "\e[94mStart!\e[0m"
	tput cup 8 $(((nbColumns - 6)/2))
	echo -e "\e[94mScores\e[0m"
	tput cup 9 $(((nbColumns - 6)/2))
	echo -e "\e[94mHelp\e[0m"
	tput cup 10 $(((nbColumns - 6)/2))
	echo -e "\e[94mQuit\e[0m"
	
	#-
	
	# Display cursor
	
	tput cup $((position+6)) $(((nbColumns - 8)/2-3))
	echo -e "->"
	
	#-
	
	# Read the hit key
	
	read key
	
	#-
	
	if [ $? -eq 0 ] && [ -z "$key" ]; then # If [Return] hit...
		
		# Clear the display
		
		echo -ne "\0033\0143"; setterm -cursor off
		
		#-
		
		case "$position" in
		
		"1") # If "Start" is selected...
			
			# Display the traffic lights
			
			echo """
        
         ____
        | __ |
        |/  \|
        |\__/|
        |/  \|
        |\__/|
        |/  \|
        |\__/|
        |____|
"""
			
			tput cup 4 10
			echo -e "\e[91m##\e[0m"
			tput cup 5 10
			echo -e "\e[91m##\e[0m"
			
			sleep 1
			
			tput cup 6 10
			echo -e "\e[93m##\e[0m"
			tput cup 7 10
			echo -e "\e[93m##\e[0m"
			
			sleep 1
			
			tput cup 8 10
			echo -e "\e[92m##\e[0m"
			tput cup 9 10
			echo -e "\e[92m##\e[0m"
			tput cup 9 18
			echo -e "\e[92mGO!\e[0m"
			
			#-
			
			# Clear the input buffer
			
			read -t 1 -n 10000 discard
			
			#-
			
			# Save the initial time
			
			timeInit="$(date +%s%N)"
			
			#-
			
			# Initialize game data
			
			penalty=1
			score=0
			mistakes=""
			
			#-
			
			# Always wait for the user input from now
			
			stty sane
			
			#-
			
			tput cup 12 0
			
			while [ "$score" -gt "$minScore" -a "$score" -lt "$maxScore" ]; do # Until the end of the game...
				
				# Get a random preposition and its case
				
				prepositionLine=$(echo "$prepositions" | shuf -n 1)
				preposition=$(echo "$prepositionLine" | cut -f1)
				kdoco=$(echo "$prepositionLine" | cut -f4)
				caseNumber=$(echo "$prepositionLine" | cut -f2)
				
				#-
				
				# Ask the question
				
				echo -n " $preposition ?"
				read -sn 1 answer
				
				#-
				
				if [ "$answer" == "$caseNumber" ]; then # If the answer it true...
					
					# Increade the score
					
					((score+=2))
					
					#-
					
					# Display the score
					
					echo -e "\t\t\e[92myes!  \e[94m+2  \e[93m$score \e[0m\t\t'$preposition $kdoco!'"
					
					#-
					
					# Reset the penalty
					
					penalty=1
					
					#-
				
				else # If not...
					
					# Decrease the score
					
					((score-=penalty))
					
					#-
					
					# Display the score
					
					echo -e "\t\t\\e[91mnooo!  \e[34m-$penalty  \e[93m$score \e[0m"
					
					#-
					
					# Increase the penalty
					
					((penalty+=1))
					
					#-
					
					# Save the preposition to the mistake list
					
					mistakes="$mistakes\n $preposition\t$kdoco!\t($caseNumber)"
					
					#-
					
				
				fi
			done
			
			# Never wait for the user input from now
			
			stty -echo -icanon time 0 min 0
			
			#-
			
			# Clear the display
			
			echo -ne "\0033\0143"; setterm -cursor off
			
			#-
			
			if [ "$score" -ge "$maxScore" ]; then # When the score reaches the maximum...
				
				# Calculate the delta time
				
				time="$(($(date +%s%N)-$timeInit))"
				
				centiseconds="$(($time/10000000%10))"
				deciseconds="$(($time/100000000%10))"
				seconds="$(($time/1000000000%10))"
				decaseconds="$(($time/10000000000%6))"
				minutes="$(($time/60000000000%10))"
				decaminutes="$(($time/600000000000%6))"
				hours="$(($time/3600000000000%10))"
				decahours="$(($time/36000000000000))"
				
				date="$decaminutes$minutes min $decaseconds$seconds sec $deciseconds$centiseconds"
				
				#-
				
				# Clear the display
				
				echo -ne "\0033\0143"; setterm -cursor off
				
				#-
				
				# Display the flag with time
				
				echo -e """

        
         _______________________
        |_|#|_|#|_|#|_|#|_|#|_|#|
        |#|_|#|_|#|_|#|_|#|_|#|_|
        |_|#|_|#|_|#|_|#|_|#|_|#|
        |#|_|#|_|#|_|#|_|#|_|#|_|
        |_|#|_|#|_|#|_|#|_|#|_|#|
        |#|_|#|_|#|_|#|_|#|_|#|_|
        ||
        ||
        ||     \e[92mFINISHED ! :D\e[0m
        ||
        ||
        ||
        ||
        ||
	"""
				sleep 1
				
				tput cup 14 19
				echo "time:"
				
				sleep 1
				
				tput cup 15 14
				echo -e "\e[96m$date\e[0m"
				
				sleep 1
				
				#-
				
				# Display the mistake list
				
				mistakes="$(echo -e "$mistakes" | sort -u)"
				
				tput cup 19 0
				echo -e " To review:\n$mistakes"
				
				#-
				
				# Wait the user hits [Return]
				
				stty sane
				read -s
				stty -echo -icanon time 0 min 0
				
				#-
				
				# Check if the user is in high scores
				
				newScores="$(cut -f1 $scoreFile; echo $date)"
				
				#...
				
				if [ "$(echo "$newScores" | sort | tail -1)" != "$date" -o "$(echo "$newScores" | wc -l)" -le "5" ]; then # If yes...
					
					# Clear the display
					
					echo -ne "\0033\0143"; setterm -cursor off
					
					#-
					
					# Display the cup
					
					echo -e """\e[33m

         CONGRATULATION!
          
                  \e[93m*\e[33m           
      /  \=======\e[93m***\e[33m=/  \     
     /    |\e[93m|\e[33m      \e[93m*\e[33m |    \    
     |    |\e[93m|\e[33m        |    |    
     |    |\e[93m|\e[33m        |    |   
     \    \\\\\e[93m\\\\\e[33m--------/    /    
      \__/ \\\\\e[93m\\\\\e[33m      / \__/    
            \\\\\e[93m\\\\\e[33m----/         
             |\e[93m|\e[33m  |          
             |\e[93m|\e[33m  |          
            _|\e[93m|\e[33m__|_          
           |\e[93m|\e[33m______|  
\e[0m"""
					
					#-
					
					# Clear the input buffer
					
					read -t 1 -n 10000 discard
					
					#-
					
					# Come back to classic behavior
					
					stty sane; setterm -cursor on
					
					#-
					
					# Ask for the user name
					
					echo -e "\n You are in the high scores!\n\n Please, enter your name! :)"
					
					echo -e "\e[93m"
					echo -n " "
					read name
					echo -e "\e[0m"
					
					stty -echo -icanon time 0 min 0; setterm -cursor off # Come back to game behavior
					
					#-
					
					# Write the score in the score file
					
					echo -e "\n$date\t$(date)\t$name" >> $scoreFile
					
					sort -u $scoreFile | sed "/^[ \t]*$/d" | head -$maxNbScores > $scoreFile.tmp
					
					mv $scoreFile.tmp $scoreFile
					
					#-
					
				fi
				
				#-
			
			else # If the minimum score is reached...
				
				# Display text
				
				echo -e "\n   \e[91mYou crashed! :(\e[0m"
				
				sleep 1
				
				#-
				
				# Display the mistake list
				
				mistakes="$(echo -e "$mistakes" | sort -u)"
				
				echo -e "\n To review:\n$mistakes"
				
				#-
				
				# Wait the user hits [Return]
				
				stty sane
				read -s
				stty -echo -icanon time 0 min 0
				
				#-
				
			fi
			
			;;
		
		"2") # If "Score" is selected...
			
			# Display the title
			
			echo -e "\nHight Scores:\n============"
			
			#-
			
			# Display the scores
			
			echo -e "\e[93m"
			awk '{printf "%d\t%s\n", NR, $0}' $scoreFile
			echo -e "\e[0m"
			
			#-
			
			# Wait the user hits [Return]
			
			echo -e "\e[2mPress [Return] to quit this page.\e[0m"
			
			stty sane
			read -s
			stty -echo -icanon time 0 min 0
			
			#-
			
			;;
		
		"3") # If "Help" is selected...
			
			# Display the title
			
			echo -e "\nPrepo-Hra Help:\n=============="
			
			#-
			
			# Display the text
			
			echo -e """
Aim:
---

The aim of Prepro-Hra is to find in a minimum time the cases associated with Czech prepositions.

Rules:
-----

Each time the gamer gives a right answer, he or she gains 2 points.
Each time the gamer gives a wrong answer, he or she loses first 1 points, then 2 points, and so on.

When the score reaches 10 points, the game is finished and the total time is displayed.
When the score reaches -20 points, the game is over.

Work:
----

When a preposition is shown to the gamer, he or she has to hit the key corresponding to the suitable case: [2] for dative, [3] for genitive, and so on.

If the gamer hits another key, the answer is considered wrong.

"""
			
			#-
			
			# Wait the user hits [Return]
			
			echo -e "\e[2mPress [Return] to quit this page.\e[0m"
			
			stty sane
			read -s
			stty -echo -icanon time 0 min 0
			
			#-
			
			;;
			
		
		"4") # If "Quit" is selected...
			
			break
			
			;;
			
		
		esac
		
		# Clear the display
		
		echo -ne "\0033\0143"; setterm -cursor off
		
		#-
		
	fi
	
	case "$key" in
	
	"$up") # If "Up" is hit...
		
		# Delete the cursor
		
		tput cup $((position+6)) $(((nbColumns - 8)/2-3))
		echo -e "  "
		
		#-
		
		# Update position
		
		((position-=1))
		
		if [ "$position" -lt "1" ]; then position=4; fi
		;;
		
		#-
		
	
	"$down") # If "Down" is hit...
		
		# Delete the cursor
		
		tput cup $((position+6)) $(((nbColumns - 8)/2-3))
		echo -e "  "
		
		#-
		
		# Update position
		
		((position+=1))
		
		if [ "$position" -gt "4" ]; then position=1; fi
		;;
		
		#-
	esac
	
done

# Display the text

tput cup 2 $(((nbColumns - 25)/2))
echo -e "\e[95mThank you for playing! :)\e[0m"

sleep 1

#-

# Clear the display

echo -ne "\0033\0143"; setterm -cursor off

#-

# Reset the terminal behavior

stty sane; setterm -cursor on

#-

exit 0
